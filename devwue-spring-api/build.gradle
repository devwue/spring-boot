apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.imflog.kafka-schema-registry-gradle-plugin'
apply plugin: 'com.commercehub.gradle.plugin.avro'
apply plugin: 'groovy'

group 'com.devwue.spring.api'
version '1.0-SNAPSHOT'

dependencies {
    compile project(":devwue-spring-dto")

    implementation 'org.mariadb.jdbc:mariadb-java-client:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation "org.springframework.boot:spring-boot-starter-json:${springBootVersion}"
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-apt'
    implementation 'com.querydsl:querydsl-jpa'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.discord4j:discord4j-core:3.1.3'

    implementation 'org.apache.avro:avro:1.10.0'
    implementation 'io.confluent:kafka-avro-serializer:5.5.0'
//    implementation "kafka-avro-confluent:kafka-avro-confluent:0.1.0"

//    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'io.sentry:sentry-spring-boot-starter:3.1.0'
    implementation 'io.sentry:sentry-logback:3.1.0'
    implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"
    implementation ("io.springfox:springfox-swagger2:${springfoxSwaggerVersion}") {
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.swagger', module: 'swagger-models'
    }
    implementation "io.swagger:swagger-annotations:1.6.1"
    implementation "io.swagger:swagger-models:1.6.1"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.spockframework:spock-spring:2.0-M3-groovy-3.0'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.6'
}

test {
    useJUnitPlatform()
}
sourceSets {
    test {
        groovy {
            srcDirs = ['test/groovy'];
        }
    }
}
configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.codehaus.groovy') {
                details.useVersion('3.0.3')
            }
        }
    }
}

bootRun {
    jvmArgs = ["-Dspring.profiles.active=local"]
}

task wrapper(type: Wrapper) {
    gradleVersion = "6.3"
    distributionUrl.replace("bin","all")
}

task zip(type: Zip, dependsOn: bootJar) {
    from('.ebextensions') {
        into '.ebextensions'
    }
    from '.procfile'
    from jar.outputs.files

    destinationDir project.buildDir
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR3"
    }
}

avro {
    createSetters = false
    fieldVisibility = 'PRIVATE'
    stringType = "charSequence"
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("devwue-spring-api/src/main/avro")
    outputDir = file("devwue-spring-api/src/main/avro")
}
schemaRegistry {

    url = 'http://localhost:8081'

    download {
        subject("Point-key", 'devwue-spring-api/src/main/avro')
        subject("Point-value", 'devwue-spring-api/src/main/avro')
    }
}
//generateAvroJava.dependsOn(['downloadSchemasTask', 'generateAvro'])
//project.tasks.getByName('compileJava').dependsOn(['downloadSchemasTask', 'generateAvro'])