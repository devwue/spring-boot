buildscript {
    ext {
        springBootVersion = "2.3.4.RELEASE"
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://packages.confluent.io/maven/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.github.imflog:kafka-schema-registry-gradle-plugin:0.9.0"
        classpath 'com.commercehub.gradle.plugin:gradle-avro-plugin:0.17.0'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" apply(false)
}

allprojects {
    group 'com.devwue.spring'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://packages.confluent.io/maven/"
        }
        mavenCentral()
    }

}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    sourceCompatibility = 11
    targetCompatibility = 11

    task info {
        println "group_name_version : $project.group:$project.name:$project.version"
        println "root project name : $project.rootProject.name"
        println ""
    }

    compileJava {
        sourceCompatibility = '11'
        targetCompatibility = '11'
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'com.amazonaws:aws-java-sdk-kms:1.11.734'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    jacoco {
        reportsDir = file("${project.rootDir}/reports")
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled false
            // sonar 연동이면 on
            csv.enabled true
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                limit {
                    // 측정 기준
                    counter = 'BRANCH'

                    // 성공 기준
                    value = 'COVEREDRATIO'
                    minimum = 0.90
                }
            }
        }
    }
}